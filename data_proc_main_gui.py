#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 05, 2018 12:30:53 PM

import os
from tkinter import filedialog

from camera_proc_csv import *
import main_gui_support
from show_result_dialog_gui import vp_start_gui_result_dialog

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True


def vp_start_gui():
    """Starting point when module is the main routine."""
    global w, root
    global last_work_dir
    last_work_dir = os.getcwd()

    """
    Add this part to memory the last work directory.
    
    Due to confliction between backslash and escape character (with special character), 
    when we save file path ( backslash included ) to a file (such as .txt file ), 
    the system will change the path format to a Unix style, i.e, aaa/bbb, no matter what
    kind of OS we are using ( Windows, Linux, or Mac OS ). 
    
    That is to say, backslash will be replaced with slash. But do not worry, the python 
    can handle unix style path (using slash not backslash) very well in windows environment.
    
    If we do want to keep the original path with backslash, we can save the string (maybe one row)
    to a ".csv" file , or ".xls" (or ".xlsx") file, using functions like "writerow".
    
    """
    print("enter vp_start_gui() , last_work_dir = " + last_work_dir)

    last_path_config_file = os.getcwd() + os.path.sep + "last_data_path.txt"
    if os.path.exists(last_path_config_file):
        with open(last_path_config_file, mode="r") as fd_last_path:
            last_path_read = fd_last_path.read()
            print("read last work dir from last_data_path.txt  :  " + last_path_read)
            if last_path_read != "" and os.path.exists(last_path_read):
                last_work_dir = last_path_read

    print("After read config , last_work_dir = " + last_work_dir)

    root = Tk()
    top = CSV_data_process(root)
    main_gui_support.init(root, top)
    root.mainloop()


w = None

last_work_dir = None


def create_CSV_data_process(root, *args, **kwargs):
    """Starting point when module is imported by another program."""
    global w, rt
    rt = root
    w = Toplevel(root)
    top = CSV_data_process(w)
    main_gui_support.init(w, top, *args, **kwargs)
    return w, top


def destroy_CSV_data_process():
    global w
    w.destroy()
    w = None


class CSV_data_process:
    color_test_file_list = [None, None, None, None]
    step_test_file_list = [None, None]
    shading_test_file_list = [None, None]

    def __init__(self, top=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'

        top.geometry("720x560+532+183")
        # top.title("CSV data process")
        top.title(("客观测试CSV文件数据处理程序".encode('utf8').decode('utf8')))
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Labelframe1_Color = LabelFrame(top)
        self.Labelframe1_Color.place(relx=0.08, rely=0.04, relheight=0.41, relwidth=0.78)
        self.Labelframe1_Color.configure(relief=GROOVE)
        self.Labelframe1_Color.configure(foreground="black")
        # self.Labelframe1_Color.configure(text='''color test''')
        self.Labelframe1_Color.configure(text="色彩测试".encode('utf8').decode('utf8'))
        self.Labelframe1_Color.configure(background="#d9d9d9")
        self.Labelframe1_Color.configure(highlightbackground="#d9d9d9")
        self.Labelframe1_Color.configure(highlightcolor="black")
        self.Labelframe1_Color.configure(width=480)

        self.Text1_file_01_path = Text(self.Labelframe1_Color)
        self.Text1_file_01_path.place(relx=0.11, rely=0.13, relheight=0.13, relwidth=0.47, y=-13, h=13)
        # self.Text1_file_01_path.place(relx=0.11, rely=0.13, height=30, width=264, y=-13)

        self.Text1_file_01_path.configure(background="white")
        self.Text1_file_01_path.configure(font="TkTextFont")
        self.Text1_file_01_path.configure(foreground="black")
        self.Text1_file_01_path.configure(highlightbackground="#d9d9d9")
        self.Text1_file_01_path.configure(highlightcolor="black")
        self.Text1_file_01_path.configure(insertbackground="black")
        self.Text1_file_01_path.configure(selectbackground="#c4c4c4")
        self.Text1_file_01_path.configure(selectforeground="black")
        self.Text1_file_01_path.configure(width=264)
        self.Text1_file_01_path.configure(wrap=WORD)
        self.Text1_file_01_path.configure(state='disabled')

        self.Text2_file_02_path = Text(self.Labelframe1_Color)
        self.Text2_file_02_path.place(relx=0.11, rely=0.35, relheight=0.13, relwidth=0.47, y=-13, h=13)
        # self.Text2_file_02_path.place(relx=0.11, rely=0.35, height=30, width=264, y=-13)
        # Mark for Modification
        self.Text2_file_02_path.configure(background="white")
        self.Text2_file_02_path.configure(font="TkTextFont")
        self.Text2_file_02_path.configure(foreground="black")
        self.Text2_file_02_path.configure(highlightbackground="#d9d9d9")
        self.Text2_file_02_path.configure(highlightcolor="black")
        self.Text2_file_02_path.configure(insertbackground="black")
        self.Text2_file_02_path.configure(selectbackground="#c4c4c4")
        self.Text2_file_02_path.configure(selectforeground="black")
        self.Text2_file_02_path.configure(width=264)
        self.Text2_file_02_path.configure(wrap=WORD)
        self.Text2_file_02_path.configure(state='disabled')
        # Mark for Modification

        self.Text3_file_03_path = Text(self.Labelframe1_Color)
        self.Text3_file_03_path.place(relx=0.11, rely=0.57, relheight=0.13, relwidth=0.47, y=-13, h=13)
        # self.Text3_file_03_path.place(relx=0.11, rely=0.57, height=30, width=264, y=-13)

        self.Text3_file_03_path.configure(background="white")
        self.Text3_file_03_path.configure(font="TkTextFont")
        self.Text3_file_03_path.configure(foreground="black")
        self.Text3_file_03_path.configure(highlightbackground="#d9d9d9")
        self.Text3_file_03_path.configure(highlightcolor="black")
        self.Text3_file_03_path.configure(insertbackground="black")
        self.Text3_file_03_path.configure(selectbackground="#c4c4c4")
        self.Text3_file_03_path.configure(selectforeground="black")
        self.Text3_file_03_path.configure(width=264)
        self.Text3_file_03_path.configure(wrap=WORD)
        self.Text3_file_03_path.configure(state='disabled')
        # Mark for Modification

        self.Text4_file_04_path = Text(self.Labelframe1_Color)
        self.Text4_file_04_path.place(relx=0.11, rely=0.78, relheight=0.13, relwidth=0.47, y=-13, h=13)
        # self.Text4_file_04_path.place(relx=0.11, rely=0.78, height=30, width=264, y=-13)

        self.Text4_file_04_path.configure(background="white")
        self.Text4_file_04_path.configure(font="TkTextFont")
        self.Text4_file_04_path.configure(foreground="black")
        self.Text4_file_04_path.configure(highlightbackground="#d9d9d9")
        self.Text4_file_04_path.configure(highlightcolor="black")
        self.Text4_file_04_path.configure(insertbackground="black")
        self.Text4_file_04_path.configure(selectbackground="#c4c4c4")
        self.Text4_file_04_path.configure(selectforeground="black")
        self.Text4_file_04_path.configure(width=264)
        self.Text4_file_04_path.configure(wrap=WORD)
        self.Text4_file_04_path.configure(state='disabled')
        # Mark for Modification

        self.Button1_add_file_01 = Button(self.Labelframe1_Color, command=self.add_color_test_file_01)
        self.Button1_add_file_01.place(relx=0.63, rely=0.13, height=30, width=50, y=-13)
        self.Button1_add_file_01.configure(activebackground="#d9d9d9")
        self.Button1_add_file_01.configure(activeforeground="#000000")
        self.Button1_add_file_01.configure(background="#d9d9d9")
        self.Button1_add_file_01.configure(disabledforeground="#a3a3a3")
        self.Button1_add_file_01.configure(foreground="#000000")
        self.Button1_add_file_01.configure(highlightbackground="#d9d9d9")
        self.Button1_add_file_01.configure(highlightcolor="black")
        self.Button1_add_file_01.configure(pady="0")
        # self.Button1_add_file_01.configure(text='''Add''')
        self.Button1_add_file_01.configure(text="添加".encode('utf8').decode('utf8'))

        self.Button2_del_file_01 = Button(self.Labelframe1_Color, command=self.del_color_test_file_01)
        self.Button2_del_file_01.place(relx=0.77, rely=0.13, height=30, width=50, y=-13)
        self.Button2_del_file_01.configure(activebackground="#d9d9d9")
        self.Button2_del_file_01.configure(activeforeground="#000000")
        self.Button2_del_file_01.configure(background="#d9d9d9")
        self.Button2_del_file_01.configure(disabledforeground="#a3a3a3")
        self.Button2_del_file_01.configure(foreground="#000000")
        self.Button2_del_file_01.configure(highlightbackground="#d9d9d9")
        self.Button2_del_file_01.configure(highlightcolor="black")
        self.Button2_del_file_01.configure(pady="0")
        # self.Button2_del_file_01.configure(text='''Del''')
        self.Button2_del_file_01.configure(text="删除".encode('utf8').decode('utf8'))

        self.Button3_add_file_02 = Button(self.Labelframe1_Color, command=self.add_color_test_file_02)
        self.Button3_add_file_02.place(relx=0.63, rely=0.35, height=30, width=50, y=-13)
        self.Button3_add_file_02.configure(activebackground="#d9d9d9")
        self.Button3_add_file_02.configure(activeforeground="#000000")
        self.Button3_add_file_02.configure(background="#d9d9d9")
        self.Button3_add_file_02.configure(disabledforeground="#a3a3a3")
        self.Button3_add_file_02.configure(foreground="#000000")
        self.Button3_add_file_02.configure(highlightbackground="#d9d9d9")
        self.Button3_add_file_02.configure(highlightcolor="black")
        self.Button3_add_file_02.configure(pady="0")
        # self.Button3_add_file_02.configure(text='''Add''')
        self.Button3_add_file_02.configure(text="添加".encode('utf8').decode('utf8'))

        self.Button4_del_file_02 = Button(self.Labelframe1_Color, command=self.del_color_test_file_02)
        self.Button4_del_file_02.place(relx=0.77, rely=0.35, height=30, width=50, y=-13)
        self.Button4_del_file_02.configure(activebackground="#d9d9d9")
        self.Button4_del_file_02.configure(activeforeground="#000000")
        self.Button4_del_file_02.configure(background="#d9d9d9")
        self.Button4_del_file_02.configure(disabledforeground="#a3a3a3")
        self.Button4_del_file_02.configure(foreground="#000000")
        self.Button4_del_file_02.configure(highlightbackground="#d9d9d9")
        self.Button4_del_file_02.configure(highlightcolor="black")
        self.Button4_del_file_02.configure(pady="0")
        # self.Button4_del_file_02.configure(text='''Del''')
        self.Button4_del_file_02.configure(text="删除".encode('utf8').decode('utf8'))

        self.Button5_add_file_03 = Button(self.Labelframe1_Color, command=self.add_color_test_file_03)
        self.Button5_add_file_03.place(relx=0.63, rely=0.57, height=30, width=50, y=-13)
        self.Button5_add_file_03.configure(activebackground="#d9d9d9")
        self.Button5_add_file_03.configure(activeforeground="#000000")
        self.Button5_add_file_03.configure(background="#d9d9d9")
        self.Button5_add_file_03.configure(disabledforeground="#a3a3a3")
        self.Button5_add_file_03.configure(foreground="#000000")
        self.Button5_add_file_03.configure(highlightbackground="#d9d9d9")
        self.Button5_add_file_03.configure(highlightcolor="black")
        self.Button5_add_file_03.configure(pady="0")
        # self.Button5_add_file_03.configure(text='''Add''')
        self.Button5_add_file_03.configure(text="添加".encode('utf8').decode('utf8'))

        self.Button6_del_file_03 = Button(self.Labelframe1_Color, command=self.del_color_test_file_03)
        self.Button6_del_file_03.place(relx=0.77, rely=0.57, height=30, width=50, y=-13)
        self.Button6_del_file_03.configure(activebackground="#d9d9d9")
        self.Button6_del_file_03.configure(activeforeground="#000000")
        self.Button6_del_file_03.configure(background="#d9d9d9")
        self.Button6_del_file_03.configure(disabledforeground="#a3a3a3")
        self.Button6_del_file_03.configure(foreground="#000000")
        self.Button6_del_file_03.configure(highlightbackground="#d9d9d9")
        self.Button6_del_file_03.configure(highlightcolor="black")
        self.Button6_del_file_03.configure(pady="0")
        # self.Button6_del_file_03.configure(text='''Del''')
        self.Button6_del_file_03.configure(text="删除".encode('utf8').decode('utf8'))

        self.Button7_add_file_04 = Button(self.Labelframe1_Color, command=self.add_color_test_file_04)
        self.Button7_add_file_04.place(relx=0.63, rely=0.78, height=30, width=50, y=-13)
        self.Button7_add_file_04.configure(activebackground="#d9d9d9")
        self.Button7_add_file_04.configure(activeforeground="#000000")
        self.Button7_add_file_04.configure(background="#d9d9d9")
        self.Button7_add_file_04.configure(disabledforeground="#a3a3a3")
        self.Button7_add_file_04.configure(foreground="#000000")
        self.Button7_add_file_04.configure(highlightbackground="#d9d9d9")
        self.Button7_add_file_04.configure(highlightcolor="black")
        self.Button7_add_file_04.configure(pady="0")
        # self.Button7_add_file_04.configure(text='''Add''')
        self.Button7_add_file_04.configure(text="添加".encode('utf8').decode('utf8'))

        self.Button8_del_file_04 = Button(self.Labelframe1_Color, command=self.del_color_test_file_04)
        self.Button8_del_file_04.place(relx=0.77, rely=0.78, height=30, width=50, y=-13)
        self.Button8_del_file_04.configure(activebackground="#d9d9d9")
        self.Button8_del_file_04.configure(activeforeground="#000000")
        self.Button8_del_file_04.configure(background="#d9d9d9")
        self.Button8_del_file_04.configure(disabledforeground="#a3a3a3")
        self.Button8_del_file_04.configure(foreground="#000000")
        self.Button8_del_file_04.configure(highlightbackground="#d9d9d9")
        self.Button8_del_file_04.configure(highlightcolor="black")
        self.Button8_del_file_04.configure(pady="0")
        # self.Button8_del_file_04.configure(text='''Del''')
        self.Button8_del_file_04.configure(text="删除".encode('utf8').decode('utf8'))

        self.Labelframe2_step = LabelFrame(top)
        self.Labelframe2_step.place(relx=0.08, rely=0.48, relheight=0.14, relwidth=0.78)
        self.Labelframe2_step.configure(relief=GROOVE)
        self.Labelframe2_step.configure(foreground="black")
        # self.Labelframe2_step.configure(text='''stepchart test''')
        self.Labelframe2_step.configure(text="灰阶测试".encode('utf8').decode('utf8'))
        self.Labelframe2_step.configure(background="#d9d9d9")
        self.Labelframe2_step.configure(width=570)

        self.Text5_file_05_path = Text(self.Labelframe2_step)
        self.Text5_file_05_path.place(relx=0.11, rely=0.38, relheight=0.38, relwidth=0.47, y=-13, h=13)
        # self.Text5_file_05_path.place(relx=0.11, rely=0.38, height=30, width=264, y=-13)

        self.Text5_file_05_path.configure(background="white")
        self.Text5_file_05_path.configure(font="TkTextFont")
        self.Text5_file_05_path.configure(foreground="black")
        self.Text5_file_05_path.configure(highlightbackground="#d9d9d9")
        self.Text5_file_05_path.configure(highlightcolor="black")
        self.Text5_file_05_path.configure(insertbackground="black")
        self.Text5_file_05_path.configure(selectbackground="#c4c4c4")
        self.Text5_file_05_path.configure(selectforeground="black")
        self.Text5_file_05_path.configure(width=10)
        self.Text5_file_05_path.configure(wrap=WORD)
        self.Text5_file_05_path.configure(state='disabled')
        # Mark for Modification

        self.Button9_add_file_05 = Button(self.Labelframe2_step, command=self.add_step_chart_file)
        self.Button9_add_file_05.place(relx=0.63, rely=0.38, height=30, width=50, y=-13)
        self.Button9_add_file_05.configure(activebackground="#d9d9d9")
        self.Button9_add_file_05.configure(activeforeground="#000000")
        self.Button9_add_file_05.configure(background="#d9d9d9")
        self.Button9_add_file_05.configure(disabledforeground="#a3a3a3")
        self.Button9_add_file_05.configure(foreground="#000000")
        self.Button9_add_file_05.configure(highlightbackground="#d9d9d9")
        self.Button9_add_file_05.configure(highlightcolor="black")
        self.Button9_add_file_05.configure(pady="0")
        # self.Button9_add_file_05.configure(text='''Add''')
        self.Button9_add_file_05.configure(text="添加".encode('utf8').decode('utf8'))

        self.Button10_del_file_05 = Button(self.Labelframe2_step, command=self.del_step_chart_file)
        self.Button10_del_file_05.place(relx=0.77, rely=0.38, height=30, width=50, y=-13)
        self.Button10_del_file_05.configure(activebackground="#d9d9d9")
        self.Button10_del_file_05.configure(activeforeground="#000000")
        self.Button10_del_file_05.configure(background="#d9d9d9")
        self.Button10_del_file_05.configure(disabledforeground="#a3a3a3")
        self.Button10_del_file_05.configure(foreground="#000000")
        self.Button10_del_file_05.configure(highlightbackground="#d9d9d9")
        self.Button10_del_file_05.configure(highlightcolor="black")
        self.Button10_del_file_05.configure(pady="0")
        # self.Button10_del_file_05.configure(text='''Del''')
        self.Button10_del_file_05.configure(text="删除".encode('utf8').decode('utf8'))

        self.Labelframe3_shading = LabelFrame(top)
        self.Labelframe3_shading.place(relx=0.08, rely=0.66, relheight=0.14, relwidth=0.78)
        self.Labelframe3_shading.configure(relief=GROOVE)
        self.Labelframe3_shading.configure(foreground="black")
        # self.Labelframe3_shading.configure(text='''Shading test''')
        self.Labelframe3_shading.configure(text="均匀度测试".encode('utf8').decode('utf8'))
        self.Labelframe3_shading.configure(background="#d9d9d9")
        self.Labelframe3_shading.configure(width=560)

        self.Text6_file_06_path = Text(self.Labelframe3_shading)
        self.Text6_file_06_path.place(relx=0.11, rely=0.38, relheight=0.38, relwidth=0.47, y=-13, h=13)
        # self.Text6_file_06_path.place(relx=0.11, rely=0.38, height=30, width=264, y=-13)

        self.Text6_file_06_path.configure(background="white")
        self.Text6_file_06_path.configure(font="TkTextFont")
        self.Text6_file_06_path.configure(foreground="black")
        self.Text6_file_06_path.configure(highlightbackground="#d9d9d9")
        self.Text6_file_06_path.configure(highlightcolor="black")
        self.Text6_file_06_path.configure(insertbackground="black")
        self.Text6_file_06_path.configure(selectbackground="#c4c4c4")
        self.Text6_file_06_path.configure(selectforeground="black")
        self.Text6_file_06_path.configure(width=10)
        self.Text6_file_06_path.configure(wrap=WORD)
        self.Text6_file_06_path.configure(state='disabled')
        # Mark for Modification

        self.Button11_add_file_06 = Button(self.Labelframe3_shading, command=self.add_shading_test_file)
        self.Button11_add_file_06.place(relx=0.63, rely=0.38, height=30, width=50, y=-13)
        self.Button11_add_file_06.configure(activebackground="#d9d9d9")
        self.Button11_add_file_06.configure(activeforeground="#000000")
        self.Button11_add_file_06.configure(background="#d9d9d9")
        self.Button11_add_file_06.configure(disabledforeground="#a3a3a3")
        self.Button11_add_file_06.configure(foreground="#000000")
        self.Button11_add_file_06.configure(highlightbackground="#d9d9d9")
        self.Button11_add_file_06.configure(highlightcolor="black")
        self.Button11_add_file_06.configure(pady="0")
        # self.Button11_add_file_06.configure(text='''Add''')
        self.Button11_add_file_06.configure(text="添加".encode('utf8').decode('utf8'))

        self.Button12_del_file_06 = Button(self.Labelframe3_shading, command=self.del_shading_test_file)
        self.Button12_del_file_06.place(relx=0.77, rely=0.38, height=30, width=50, y=-13)
        self.Button12_del_file_06.configure(activebackground="#d9d9d9")
        self.Button12_del_file_06.configure(activeforeground="#000000")
        self.Button12_del_file_06.configure(background="#d9d9d9")
        self.Button12_del_file_06.configure(disabledforeground="#a3a3a3")
        self.Button12_del_file_06.configure(foreground="#000000")
        self.Button12_del_file_06.configure(highlightbackground="#d9d9d9")
        self.Button12_del_file_06.configure(highlightcolor="black")
        self.Button12_del_file_06.configure(pady="0")
        # self.Button12_del_file_06.configure(text='''Del''')
        self.Button12_del_file_06.configure(text="删除".encode('utf8').decode('utf8'))

        self.Button13_proc_data = Button(top, command=self.process_data_button_pressed)
        self.Button13_proc_data.place(relx=0.24, rely=0.86, height=50, width=340)

        self.Button13_proc_data.configure(activebackground="#d9d9d9")
        self.Button13_proc_data.configure(activeforeground="#000000")
        self.Button13_proc_data.configure(background="#d9d9d9")
        self.Button13_proc_data.configure(disabledforeground="#a3a3a3")
        self.Button13_proc_data.configure(foreground="#000000")
        self.Button13_proc_data.configure(highlightbackground="#d9d9d9")
        self.Button13_proc_data.configure(highlightcolor="black")
        self.Button13_proc_data.configure(pady="0")
        # self.Button13_proc_data.configure(text='''process data''')
        self.Button13_proc_data.configure(text="处理CSV文件数据".encode('utf8').decode('utf8'))
        self.Button13_proc_data.configure(width=339)

    def add_color_test_file_01(self):
        global last_work_dir
        print("current work dir is " + last_work_dir)

        """ Add to handle the exception case that no new main GUI is open, the users
            delete the last work directory and then continue to add files. 
        """
        if os.path.exists(last_work_dir) is False:
            print("last data file path is deleted, change back to current work directory")
            last_work_dir = os.getcwd()

        filename = filedialog.askopenfilename(initialdir=last_work_dir, filetypes=[('csv files', '.csv')])
        print("The path of selected file is  " + last_work_dir)
        print("The file you select is " + filename)

        if filename == "":
            """ handle the case that users open file explorer , but do not select any file.
                We will not use a counter to count how many files are added. Because users 
                may select the same add, delete button many times to add a file , delete a file,
                or change their file selection  
            """
            print("No file is added")
            return
        else:
            # assert isinstance(filename, object)
            last_work_dir = os.path.dirname(filename)
            self.color_test_file_list[0] = filename

            self.Text1_file_01_path.configure(state='normal')
            self.Text1_file_01_path.delete(1.0, END)
            self.Text1_file_01_path.insert(1.0, filename)
            self.Text1_file_01_path.configure(state='disabled')
            pass

    def del_color_test_file_01(self):
        self.color_test_file_list[0] = None
        self.Text1_file_01_path.configure(state='normal')
        self.Text1_file_01_path.delete(1.0, END)
        self.Text1_file_01_path.configure(state='disabled')
        pass

    def add_color_test_file_02(self):
        global last_work_dir
        print("current work dir is " + last_work_dir)
        filename = filedialog.askopenfilename(initialdir=last_work_dir, filetypes=[('csv files', '.csv')])
        print("The path of selected file is  " + last_work_dir)
        print("The file you select is " + filename)

        if filename == "":
            """ handle the case that users open file explorer , but do not select any file.
                We will not use a counter to count how many files are added. Because users 
                may select the same add, delete button many times to add a file , delete a file,
                or change their file selection.
                
                We search the whole file list , and check whether list item is None or not  
            """
            print("No file is added")
            return
        else:
            # assert isinstance(filename, object)
            last_work_dir = os.path.dirname(filename)
            self.color_test_file_list[1] = filename

            self.Text2_file_02_path.configure(state='normal')
            self.Text2_file_02_path.delete(1.0, END)
            self.Text2_file_02_path.insert(1.0, filename)
            self.Text2_file_02_path.configure(state='disabled')
            pass

    def del_color_test_file_02(self):
        self.color_test_file_list[1] = None

        self.Text2_file_02_path.configure(state='normal')
        self.Text2_file_02_path.delete(1.0, END)
        self.Text2_file_02_path.configure(state='disabled')
        pass

    def add_color_test_file_03(self):
        global last_work_dir
        print("current work dir is " + last_work_dir)
        filename = filedialog.askopenfilename(initialdir=last_work_dir, filetypes=[('csv files', '.csv')])
        print("The path of selected file is  " + last_work_dir)
        print("The file you select is " + filename)

        if filename == "":
            """ handle the case that users open file explorer , but do not select any file.
                We will not use a counter to count how many files are added. Because users 
                may select the same add, delete button many times to add a file , delete a file,
                or change their file selection.

                We search the whole file list , and check whether list item is None or not  
            """
            print("No file is added")
            return
        else:
            # assert isinstance(filename, object)
            last_work_dir = os.path.dirname(filename)
            self.color_test_file_list[2] = filename

            self.Text3_file_03_path.configure(state='normal')
            self.Text3_file_03_path.delete(1.0, END)
            self.Text3_file_03_path.insert(1.0, filename)
            self.Text3_file_03_path.configure(state='disabled')
            pass

    def del_color_test_file_03(self):
        self.color_test_file_list[2] = None

        self.Text3_file_03_path.configure(state='normal')
        self.Text3_file_03_path.delete(1.0, END)
        self.Text3_file_03_path.configure(state='disabled')
        pass

    def add_color_test_file_04(self):
        global last_work_dir
        print("current work dir is " + last_work_dir)
        filename = filedialog.askopenfilename(initialdir=last_work_dir, filetypes=[('csv files', '.csv')])
        print("The path of selected file is  " + last_work_dir)
        print("The file you select is " + filename)

        if filename == "":
            """ handle the case that users open file explorer , but do not select any file.
                We will not use a counter to count how many files are added. Because users 
                may select the same add, delete button many times to add a file , delete a file,
                or change their file selection.

                We search the whole file list , and check whether list item is None or not  
            """
            print("No file is added")
            return
        else:
            # assert isinstance(filename, object)
            last_work_dir = os.path.dirname(filename)
            self.color_test_file_list[3] = filename

            self.Text4_file_04_path.configure(state='normal')
            self.Text4_file_04_path.delete(1.0, END)
            self.Text4_file_04_path.insert(1.0, filename)
            self.Text4_file_04_path.configure(state='disabled')
            pass

    def del_color_test_file_04(self):
        self.color_test_file_list[3] = None

        self.Text4_file_04_path.configure(state='normal')
        self.Text4_file_04_path.delete(1.0, END)
        self.Text4_file_04_path.configure(state='disabled')
        pass

    def add_step_chart_file(self):
        global last_work_dir
        print("current work dir is " + last_work_dir)
        filename = filedialog.askopenfilename(initialdir=last_work_dir, filetypes=[('csv files', '.csv')])
        print("The path of selected file is  " + last_work_dir)
        print("The file you select is " + filename)

        if filename == "":
            """ handle the case that users open file explorer , but do not select any file.
                We will not use a counter to count how many files are added. Because users 
                may select the same add, delete button many times to add a file , delete a file,
                or change their file selection.

                We search the whole file list , and check whether list item is None or not  
            """
            print("No file is added")
            return
        else:
            # assert isinstance(filename, object)
            last_work_dir = os.path.dirname(filename)
            self.step_test_file_list[0] = filename

            self.Text5_file_05_path.configure(state='normal')
            self.Text5_file_05_path.delete(1.0, END)
            self.Text5_file_05_path.insert(1.0, filename)
            self.Text5_file_05_path.configure(state='disabled')
            pass

    def del_step_chart_file(self):
        self.step_test_file_list[0] = None

        self.Text5_file_05_path.configure(state='normal')
        self.Text5_file_05_path.delete(1.0, END)
        self.Text5_file_05_path.configure(state='disabled')
        pass

    def add_shading_test_file(self):
        global last_work_dir
        print("current work dir is " + last_work_dir)
        filename = filedialog.askopenfilename(initialdir=last_work_dir, filetypes=[('csv files', '.csv')])
        print("The path of selected file is  " + last_work_dir)
        print("The file you select is " + filename)

        if filename == "":
            """ handle the case that users open file explorer , but do not select any file.
                We will not use a counter to count how many files are added. Because users 
                may select the same add, delete button many times to add a file , delete a file,
                or change their file selection.

                We search the whole file list , and check whether list item is None or not  
            """
            print("No file is added")
            return
        else:
            # assert isinstance(filename, object)
            last_work_dir = os.path.dirname(filename)
            self.shading_test_file_list[0] = filename

            self.Text6_file_06_path.configure(state='normal')
            self.Text6_file_06_path.delete(1.0, END)
            self.Text6_file_06_path.insert(1.0, filename)
            self.Text6_file_06_path.configure(state='disabled')
            pass

    def del_shading_test_file(self):
        self.shading_test_file_list[0] = None

        self.Text6_file_06_path.configure(state='normal')
        self.Text6_file_06_path.delete(1.0, END)
        self.Text6_file_06_path.configure(state='disabled')
        pass

    def process_data_button_pressed(self):

        print("os path real path :  " + os.path.realpath(__file__))  # 当前文件的路径

        clear_csv_data_buf()
        read_color_resut(self.color_test_file_list)
        read_stepchart_result(self.step_test_file_list)
        read_shading_result(self.shading_test_file_list)
        file_save_path = decide_file_save_path(self.color_test_file_list,
                                               self.step_test_file_list, self.shading_test_file_list)
        if file_save_path is None:
            print(" No file is selected to process, do nothing")
            return
        else:
            print(" file save path is " + file_save_path)
            write_result_csv(file_save_path)

        color_count = 0
        for file in self.color_test_file_list:
            if file is not None:
                color_count = color_count + 1

        step_file_count = 0
        for file in self.step_test_file_list:
            if file is not None:
                step_file_count = step_file_count + 1

        shading_file_count = 0
        for file in self.shading_test_file_list:
            if file is not None:
                shading_file_count = shading_file_count + 1

        vp_start_gui_result_dialog(color_count, step_file_count, shading_file_count, file_save_path)

        pass


if __name__ == '__main__':
    vp_start_gui()
